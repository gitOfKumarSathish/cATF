server {
		root /var/www/html;
	index index.html index.htm index.nginx-debian.html;

	server_name example.com;
	
	location / {
 		try_files $uri /index.html;
	}

	location /api {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		#try_files $uri $uri/ =404;
		proxy_pass http://localhost:6790/api;
	}
		location /auth {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		#try_files $uri $uri/ =404;
		proxy_pass http://localhost:6790/auth;
	}

	location /kibana {
		proxy_pass http://localhost:5601/kibana;
		proxy_redirect off;
		proxy_buffering off;
		proxy_http_version 1.1;
		proxy_set_header Connection "Keep-Alive";
		proxy_set_header Proxy-Connection "Keep-Alive";
		proxy_set_header  Host $host;
		proxy_set_header  X-Real-IP $remote_addr;
		proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header  Authorization "Basic dGVzdDp0ZXN0MTIz"; # bas$
	}

    	listen [::]:443 ssl; # managed by Certbot
    	listen 443 ssl; # managed by Certbot
    	ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; # managed by Certbot
    	ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; # managed by Certbot
    	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

server {
    if ($host = example.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


	listen 80 default_server;
	listen [::]:80 default_server;

	server_name example.com;
    return 404; # managed by Certbot


}